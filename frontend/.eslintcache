[{"D:\\dev\\EDB-Apo\\frontend\\src\\index.js":"1","D:\\dev\\EDB-Apo\\frontend\\src\\App.js":"2","D:\\dev\\EDB-Apo\\frontend\\src\\components\\startseite\\Startseite.js":"3","D:\\dev\\EDB-Apo\\frontend\\src\\components\\btmbuch\\BTMBuch.js":"4","D:\\dev\\EDB-Apo\\frontend\\src\\components\\startseite\\Login.js":"5","D:\\dev\\EDB-Apo\\frontend\\src\\components\\headers\\Header.js":"6","D:\\dev\\EDB-Apo\\frontend\\src\\components\\headers\\StatusHeader.js":"7","D:\\dev\\EDB-Apo\\frontend\\src\\user\\UserDetails.js":"8","D:\\dev\\EDB-Apo\\frontend\\src\\components\\btmbuch\\NeuesBtmModal.js":"9","D:\\dev\\EDB-Apo\\frontend\\src\\components\\btmbuch\\BuchungTabelle.js":"10","D:\\dev\\EDB-Apo\\frontend\\src\\components\\btmbuch\\NeueBuchungModal.js":"11","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\einstellungen\\ApothekeEinstellungen.js":"12","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\ApothekenDetails.js":"13","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\ApothekeBtmList.js":"14","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\einstellungen\\tabellen\\PersonalTabelle.js":"15","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\einstellungen\\tabellen\\ArztTabelle.js":"16","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\einstellungen\\tabellen\\LieferantTabelle.js":"17","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\einstellungen\\tabellen\\BtmTabelle.js":"18","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\PersonalAddModal.js":"19","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\DeleteModal.js":"20","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\PersonalEditModal.js":"21","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\BtmAddModal.js":"22","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\LieferantEditModal.js":"23","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\BtmEditModal.js":"24","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\ArztEditModal.js":"25","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\LieferantAddModal.js":"26","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\ArztAddModal.js":"27","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\ApothekeEditModal.js":"28","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\UserDetailsUpdateModal.js":"29","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\ApothekeRegisterModal.js":"30","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\useForm.js":"31","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\UpdateBuchungModal.js":"32"},{"size":280,"mtime":1607716944341,"results":"33","hashOfConfig":"34"},{"size":1001,"mtime":1608144374606,"results":"35","hashOfConfig":"34"},{"size":291,"mtime":1607953306893,"results":"36","hashOfConfig":"34"},{"size":2352,"mtime":1608144374607,"results":"37","hashOfConfig":"34"},{"size":2301,"mtime":1608045184175,"results":"38","hashOfConfig":"34"},{"size":206,"mtime":1607953306892,"results":"39","hashOfConfig":"34"},{"size":542,"mtime":1607953306893,"results":"40","hashOfConfig":"34"},{"size":1647,"mtime":1607969714791,"results":"41","hashOfConfig":"34"},{"size":4879,"mtime":1607953306892,"results":"42","hashOfConfig":"34"},{"size":11064,"mtime":1608210086311,"results":"43","hashOfConfig":"34"},{"size":8074,"mtime":1608144374607,"results":"44","hashOfConfig":"34"},{"size":4915,"mtime":1608032722487,"results":"45","hashOfConfig":"34"},{"size":1695,"mtime":1608045184175,"results":"46","hashOfConfig":"34"},{"size":1876,"mtime":1608045184174,"results":"47","hashOfConfig":"34"},{"size":4203,"mtime":1607961925919,"results":"48","hashOfConfig":"34"},{"size":3969,"mtime":1607961881960,"results":"49","hashOfConfig":"34"},{"size":4253,"mtime":1607961900285,"results":"50","hashOfConfig":"34"},{"size":3950,"mtime":1607961867240,"results":"51","hashOfConfig":"34"},{"size":5146,"mtime":1608027242688,"results":"52","hashOfConfig":"34"},{"size":1120,"mtime":1607953306894,"results":"53","hashOfConfig":"34"},{"size":6405,"mtime":1608027242688,"results":"54","hashOfConfig":"34"},{"size":4523,"mtime":1607962038625,"results":"55","hashOfConfig":"34"},{"size":3548,"mtime":1608027242688,"results":"56","hashOfConfig":"34"},{"size":5656,"mtime":1607962116356,"results":"57","hashOfConfig":"34"},{"size":3517,"mtime":1608027242688,"results":"58","hashOfConfig":"34"},{"size":3218,"mtime":1608027242688,"results":"59","hashOfConfig":"34"},{"size":3180,"mtime":1608027239646,"results":"60","hashOfConfig":"34"},{"size":3085,"mtime":1608027489589,"results":"61","hashOfConfig":"34"},{"size":7659,"mtime":1607969714791,"results":"62","hashOfConfig":"34"},{"size":9314,"mtime":1608144374608,"results":"63","hashOfConfig":"34"},{"size":716,"mtime":1607716944342,"results":"64","hashOfConfig":"34"},{"size":8268,"mtime":1608144374608,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"19g8awo",{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"68"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"68"},"D:\\dev\\EDB-Apo\\frontend\\src\\index.js",[],["147","148"],"D:\\dev\\EDB-Apo\\frontend\\src\\App.js",["149"],"import React from 'react';\r\nimport './App.scss';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Startseite from './components/startseite/Startseite';\r\nimport BTMBuch from './components/btmbuch/BTMBuch';\r\nimport ApothekeEinstellungen from './components/apotheke/einstellungen/ApothekeEinstellungen';\r\nimport { SnackbarProvider } from 'notistack';\r\nrequire('dotenv').config()\r\n\r\nfunction App() {\r\n  return (\r\n  <React.Fragment>\r\n    <SnackbarProvider maxSnack={10} anchorOrigin={{vertical:'bottom', horizontal:'center'}}>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Startseite} />\r\n          <Route path=\"/login\" exact component={Startseite} />\r\n          <Route path=\"/apotheke/:apoId\" exact component={BTMBuch} />\r\n          <Route path=\"/apotheke/:apoId/einstellungen\" exact component={ApothekeEinstellungen} />\r\n        </Switch>\r\n      </Router>\r\n    </SnackbarProvider>\r\n  </React.Fragment>);\r\n}\r\n\r\nexport default App;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\components\\startseite\\Startseite.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\components\\btmbuch\\BTMBuch.js",["150"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport Header from '../headers/Header'\r\nimport StatusHeader from '../headers/StatusHeader'\r\nimport ApothekenDetails from '../apotheke/ApothekenDetails';\r\nimport UserDetails from '../../user/UserDetails';\r\nimport ApothekeBtmList from '../apotheke/ApothekeBtmList';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport './BTMBuch.scss'\r\n \r\nfunction BTMBuch (props) {\r\n  const { apoId } = useParams();\r\n\r\n  const [user, setUser] = useState({});\r\n  const [isLoggedIn, setLoggedIn] = useState(false);\r\n  const [aktiveRolle, setAktiveRolle] = useState('');\r\n\r\n  const getUserDetails = async event => {\r\n      const response = await fetch(`http://${process.env.REACT_APP_BACKEND_URL}/benutzer/me`, {\r\n          method: 'GET',\r\n          headers: {\r\n              'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n          }\r\n      }).catch((err) => {\r\n          //SHOW ERROR\r\n          return;\r\n      });\r\n\r\n      if(response.status === 200) {\r\n          let u = await response.json();\r\n          console.log(JSON.stringify(u))\r\n          setUser(u);\r\n          setAktiveRolle(u.rolle);\r\n          setLoggedIn(true);\r\n      }else if(response.status === 403) {\r\n          props.history.push('/forbidden');\r\n      }else if(response.status === 400){\r\n          props.history.push('/badrequest');\r\n      }\r\n  }\r\n\r\n  useEffect(() => {\r\n      getUserDetails();\r\n  }, [])\r\n\r\n  //this obj is passed to each child, each child can add functions to this object and call functions from this object\r\n  let apothekeRefFunctions = {}\r\n  \r\n  return(\r\n      <React.Fragment>\r\n          {aktiveRolle.toLowerCase() !== 'benutzer' ?<StatusHeader aktiveRolle={aktiveRolle}/> : null}\r\n          <Header />\r\n          <Row className=\"details-list\">\r\n              <Col><ApothekenDetails {...props} apothekeRefFunctions={apothekeRefFunctions} apothekeId={apoId}/></Col>\r\n              <Col>{isLoggedIn ? <UserDetails {...props} user={user} setUser={setUser} aktiveRolle={aktiveRolle} setAktiveRolle={setAktiveRolle}/> : null }</Col>\r\n          </Row> \r\n          <ApothekeBtmList apothekeId={apoId} user={user} apothekeRefFunctions={apothekeRefFunctions} {...props} aktiveRolle={aktiveRolle}/>    \r\n      </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default BTMBuch;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\components\\startseite\\Login.js",["151"],"import React, { useState } from 'react';\r\nimport {Row, Col, Button, Form,} from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport ApothekeRegisterModal from '../../modals/ApothekeRegisterModal';\r\nimport './Startseite.scss'\r\n\r\n\r\nfunction Login(props) {\r\n    const [neuesApoRegisterModal, setNeuesApoRegisterModal] = useState(false);\r\n    const {handleSubmit} = useForm();\r\n    const [user, setUser] = useState({username:'', password:''});\r\n    \r\n    const login = async event => {\r\n        const response = await fetch(`http://${process.env.REACT_APP_BACKEND_URL}/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: user.username,\r\n                password: user.password\r\n            })\r\n        }).catch((err) => {\r\n            //SHOW ERROR\r\n            console.log(err);\r\n        });\r\n\r\n\r\n        if(response && response.status === 200){\r\n            const data = await response.json();\r\n            window.sessionStorage.setItem(\"edbapo-jwt\", data.jwt)\r\n            props.history.push(`/apotheke/${data.apothekeId}`);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <b style={{fontSize:'20pt'}}>Login:</b>\r\n            <Form onSubmit={handleSubmit(login)} >\r\n                <Form.Row>\r\n                    <Col>\r\n                        <Form.Control onChange={e => setUser({...user, username: e.target.value})} placeholder=\"Benutzername\" />\r\n                        <Form.Control onChange={e => setUser({...user, password: e.target.value})} placeholder=\"Passwort\" />\r\n                        <Button variant=\"primary\" type=\"submit\">Login</Button>    \r\n                        <Button variant=\"primary\"  show={neuesApoRegisterModal} onClick={() => setNeuesApoRegisterModal(true)}>Neue Apotheke registrieren</Button>\r\n                        <ApothekeRegisterModal\r\n                                show={neuesApoRegisterModal}\r\n                                {...props}\r\n                                onHide={() => setNeuesApoRegisterModal(false)} ></ApothekeRegisterModal>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\nexport default Login;","D:\\dev\\EDB-Apo\\frontend\\src\\components\\headers\\Header.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\components\\headers\\StatusHeader.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\user\\UserDetails.js",["152","153","154"],"import React, {useState} from 'react'\r\nimport { Button, Col, Row, Form } from 'react-bootstrap';\r\nimport { Settings } from '@material-ui/icons';\r\nimport UserDetailsUpdateModal from '../modals/UserDetailsUpdateModal';\r\n\r\nfunction UserDetails(props) {\r\n    //eslint disable-next-line\r\n   const {rolle, vorname, name, nutzername, aktiv} = props.user;\r\n   const [showUserSettings, setShowUserSettings] = useState(false);\r\n\r\n   var allRoles = {\r\n       ADMIN : { 0: \"Admin\", 1 : \"Pruefer\", 2: \"Benutzer\"},\r\n       PRUEFER : { 0 : \"Pruefer\", 1: \"Benutzer\"},\r\n       BENUTZER : { 0: \"Benutzer\"}\r\n   }\r\n\r\n   const logout = () => {\r\n       window.sessionStorage.removeItem(\"edbapo-jwt\")\r\n       props.history.push('/');\r\n   }\r\n\r\n   return(\r\n       <Row>\r\n           <UserDetailsUpdateModal {...props} loggedInUser={props.user} show={showUserSettings} onHide={() => setShowUserSettings(false)}/>\r\n\r\n           <Col><b>Nutzername:</b> {nutzername}</Col>\r\n           <Col>\r\n               <Form.Control as=\"select\" onChange={(event) => props.setAktiveRolle(event.target.value.toUpperCase())}>\r\n                   {Object.keys(allRoles[rolle]).map( role => <option key={allRoles[rolle][role]} value={allRoles[rolle][role]}>{allRoles[rolle][role]}</option>)}\r\n               </Form.Control>\r\n           </Col>\r\n           <Col>\r\n                <Button onClick={() => setShowUserSettings(true)}>\r\n                    <Settings />\r\n                    Einstellungen\r\n                </Button>\r\n           </Col>\r\n           <Col>\r\n               <Button onClick={logout}>Logout</Button>\r\n           </Col>\r\n       </Row>\r\n   )\r\n}\r\n\r\nexport default UserDetails;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\components\\btmbuch\\NeuesBtmModal.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\components\\btmbuch\\BuchungTabelle.js",["155"],"D:\\dev\\EDB-Apo\\frontend\\src\\components\\btmbuch\\NeueBuchungModal.js",["156","157","158"],"import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nfunction NeueBuchungModal(props) {\r\n    \r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [typ, setTyp] = useState('');\r\n    let {lieferanten, aerzte, empfaenger} = props;\r\n\r\n\r\n    const [maxMenge, setMaxMenge] = useState(props.btm.btm.menge);\r\n\r\n    const sendNewBuchungAnfrage = async (buchungData) => {\r\n        const response = await fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${props.apothekeId}/btmbuchung`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n            },\r\n            body: JSON.stringify(buchungData)\r\n        }).catch((err) => {\r\n            //SHOW ERROR\r\n            console.log(err);\r\n        });\r\n\r\n\r\n        if (response && response.status === 201) {\r\n            const data = await response.json();\r\n            // console.log(data);\r\n            hideModal();\r\n            enqueueSnackbar('Buchung erfolgreich angelegt', { variant:'success', autoHideDuration: 3000} );\r\n            props.apothekeRefFunctions.updateBtmList();\r\n        } else {\r\n            //SHOW ERROR\r\n            console.log(response);\r\n        }\r\n    }\r\n\r\n    const createNewBuchung = event => {\r\n        event.preventDefault();\r\n        if (typ.toLowerCase() === 'zugang') {\r\n            let { anforderungsschein, btmMenge, lieferant, datum} = event.target;\r\n            let buchungData = {\r\n                benutzer: props.user.id,\r\n                btm: props.btm.btm.id,\r\n                menge: btmMenge.value,\r\n                typ: 'ZUGANG',\r\n                lieferant: lieferant.value,\r\n                anforderungsschein: anforderungsschein.value,\r\n                datum: datum.value,\r\n                pruefdatum: ''\r\n            }\r\n            sendNewBuchungAnfrage(buchungData);\r\n        } else if (typ.toLowerCase() === 'abgang') {\r\n            let { btmMenge, rezept, empfaenger, arzt, datum} = event.target;\r\n            let buchungData = {\r\n                benutzer: props.user.id,\r\n                btm: props.btm.btm.id,\r\n                menge: btmMenge.value,\r\n                typ: 'ABGANG',\r\n                empfaenger: empfaenger.value,\r\n                arzt: arzt.value,\r\n                rezept: rezept.value,\r\n                pruefdatum: '',\r\n                datum: datum.value\r\n            }\r\n            sendNewBuchungAnfrage(buchungData);\r\n        }\r\n    }\r\n\r\n    const hideModal = () => {\r\n        setTyp('');\r\n        props.onHide();\r\n    }\r\n\r\n    useEffect(() => {\r\n        setMaxMenge(props.btm.btm.menge)\r\n    }, []);\r\n\r\n    const renderZugang = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <Form.Group as={Row} controlId=\"anforderungsschein\">\r\n                    <Form.Label column sm=\"2\">\r\n                        Lieferschein\r\n                        </Form.Label>\r\n                    <Col sm=\"10\">\r\n                        <Form.Control name=\"anforderungsschein\" type=\"text\" required />\r\n                    </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"lieferant\">\r\n                    <Form.Label column sm=\"2\">\r\n                        Lieferant\r\n                        </Form.Label>\r\n                    <Col sm=\"10\">\r\n                        <Form.Control name=\"lieferant\" required as=\"select\">\r\n                            {lieferanten.map(l => <option key={l.id} value={l.id}>{l.name}</option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n            </React.Fragment>)\r\n    }\r\n\r\n    const renderAbgang = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <Form.Group as={Row} controlId=\"empfaenger\">\r\n                    <Form.Label column sm=\"2\">\r\n                        Empfaenger\r\n                </Form.Label>\r\n                    <Col sm=\"10\">\r\n                        <Form.Control name=\"empfaenger\" required as=\"select\">\r\n                            {empfaenger.map(e => <option key={e.id} value={e.id}>{e.name}</option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"arzt\">\r\n                    <Form.Label column sm=\"2\">\r\n                        Arzt\r\n                </Form.Label>\r\n                    <Col sm=\"10\">\r\n                        <Form.Control name=\"arzt\" required as=\"select\">\r\n                            {aerzte.map(a => <option key={a.id} value={a.id}>{a.name}</option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"rezept\">\r\n                    <Form.Label column sm=\"2\">\r\n                        Rezept\r\n                        </Form.Label>\r\n                    <Col sm=\"10\">\r\n                        <Form.Control name=\"rezept\" type=\"text\" required />\r\n                    </Col>\r\n                </Form.Group>\r\n            </React.Fragment>)\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            onExiting={hideModal}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Betäubungsmittel-Buchung hinzufügen\r\n                 </Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={createNewBuchung}>\r\n                <Modal.Body>\r\n                    <Form.Group as={Row} controlId=\"Typ\">\r\n                        <Col sm={{ span: 10, offset: 2 }}>\r\n                            <Row sm={6}>\r\n                                <Form.Check required\r\n                                    type=\"radio\"\r\n                                    label=\"Zugang\"\r\n                                    name=\"TypRadio\"\r\n                                    id=\"ZugangRadio\"\r\n                                    onClick={() => {setTyp('zugang'); setMaxMenge(9999)}}\r\n                                />\r\n                                <Form.Check required\r\n                                    type=\"radio\"\r\n                                    label=\"Abgang\"\r\n                                    name=\"TypRadio\"\r\n                                    id=\"AbgangRadio\"\r\n                                    onClick={() => setTyp('abgang')}\r\n                                />\r\n                            </Row>\r\n                        </Col>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Row} controlId=\"btmMenge\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Menge\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control name=\"btmMenge\" type=\"number\" min=\"1\" defaultValue=\"0\" />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"datum\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Datum\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control name=\"datum\" type=\"date\" defaultValue={new Date()} />\r\n                        </Col>\r\n                    </Form.Group>               \r\n\r\n                    {typ.toLowerCase() === 'zugang' ? renderZugang() : null}\r\n                    {typ.toLowerCase() === 'abgang' ? renderAbgang() : null}\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"danger\" onClick={hideModal}>Close</Button>\r\n                    <Button variant=\"primary\" type=\"submit\">Bestätigen</Button>\r\n                </Modal.Footer>\r\n            </Form>\r\n\r\n\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default NeueBuchungModal;\r\n\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\einstellungen\\ApothekeEinstellungen.js",["159"],"import React, { useState, Fragment, useEffect } from 'react';\r\nimport { ListGroup, Button, Row, Col } from 'react-bootstrap';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport Header from '../../headers/Header';\r\nimport StatusHeader from '../../headers/StatusHeader';\r\nimport UserDetails from '../../../user/UserDetails';\r\nimport ArztTabelle from './tabellen/ArztTabelle';\r\nimport BtmTabelle from './tabellen/BtmTabelle';\r\nimport LieferantTabelle from './tabellen/LieferantTabelle';\r\nimport PersonalTabelle from './tabellen/PersonalTabelle';\r\nimport ApothekeEditModal from '../../../modals/ApothekeEditModal';\r\n\r\nimport './ApothekeEinstellungen.scss'\r\n\r\nfunction ApothekeEinstellungen(props) {\r\n  const { apoId } = useParams()\r\n\r\n  const [apotheke, setApotheke] = useState({ anschrift: {} })\r\n  const [activeMenuItem, setActiveMenuItem] = useState('personal');\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  const [aktiveRolle, setAktiveRolle] = useState('');\r\n  const [user, setUser] = useState({});\r\n  const [showApothekeEditModal, setShowApothekeEditModal] = useState(false);\r\n\r\n\r\n  const getCurrentApotheke = () => {\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\")\r\n      }\r\n    }).then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json()\r\n      } else if (res.status === 403) {\r\n        props.history.push('forbidden');\r\n      } else if (res.status === 400) {\r\n        props.history.push('badrequest');\r\n      }\r\n    }).then((data) => setApotheke(data))\r\n      .catch((err) => {\r\n        //SHOW ERROR\r\n        return;\r\n      })\r\n  }\r\n\r\n  const getUserData = () => {\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/benutzer/me`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n      }\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          return res.json()\r\n        } else if (res.status === 403) {\r\n          props.history.push('forbidden');\r\n        } else if (res.status === 400) {\r\n          props.history.push('badrequest');\r\n        }\r\n      }).then((data) => {\r\n        setUser(data);\r\n        setAktiveRolle(data.rolle)\r\n        setLoggedIn(true)\r\n      }).catch((err) => {\r\n        //SHOW ERROR\r\n        return;\r\n      });\r\n  }\r\n\r\n\r\n  const renderContent = () => {\r\n    if (activeMenuItem === 'personal') {\r\n      return <PersonalTabelle {...props} />;\r\n    } else if (activeMenuItem === 'btm') {\r\n      return <BtmTabelle {...props} />;\r\n    } else if (activeMenuItem === 'aerzte') {\r\n      return <ArztTabelle {...props} />\r\n    } else if (activeMenuItem === 'lieferanten') {\r\n      return <LieferantTabelle {...props} />\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getUserData();\r\n    getCurrentApotheke();\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <ApothekeEditModal {...props} show={showApothekeEditModal} onHide={() => setShowApothekeEditModal(false)} apotheke={apotheke} updateApothekeData={getCurrentApotheke} />\r\n      <StatusHeader aktiveRolle={aktiveRolle} />\r\n      <Header />\r\n      <Row className=\"details-list\">\r\n        <Col md={{ span: 6, offset: 6 }}>\r\n          {loggedIn ? <UserDetails {...props} user={user} setUser={setUser} aktiveRolle={aktiveRolle} setAktiveRolle={setAktiveRolle} /> : null}\r\n        </Col>\r\n      </Row>\r\n      <div className=\"main-content\">\r\n        <Row>\r\n          <Col sm={4}>\r\n            <ul>\r\n              <li>Name: {apotheke.name}</li>\r\n              <li>E-Mail: {apotheke.email}</li>\r\n              <li>Anschrift: {apotheke.anschrift.strasse} {apotheke.anschrift.nummer}  ({apotheke.anschrift.plz} {apotheke.anschrift.ort})</li>\r\n            </ul>\r\n            <Button onClick={() => setShowApothekeEditModal(true)}>Angaben bearbeiten</Button>\r\n          </Col>\r\n        </Row>\r\n        <Row style={{ marginTop: '3em' }}>\r\n          <Col sm={3}>\r\n            <ListGroup as=\"ul\" className=\"menu-list\">\r\n              <ListGroup.Item as=\"li\" onClick={() => setActiveMenuItem('personal')} active={activeMenuItem === 'personal'}>Pharmazeutisches Personal</ListGroup.Item>\r\n              <ListGroup.Item as=\"li\" onClick={() => setActiveMenuItem('btm')} active={activeMenuItem === 'btm'}>Betäubungsmittel</ListGroup.Item>\r\n              <ListGroup.Item as=\"li\" onClick={() => setActiveMenuItem('aerzte')} active={activeMenuItem === 'aerzte'}>Ärzte</ListGroup.Item>\r\n              <ListGroup.Item as=\"li\" onClick={() => setActiveMenuItem('lieferanten')} active={activeMenuItem === 'lieferanten'}>Lieferanten</ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col sm={8}>\r\n            {user ? renderContent() : null}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n\r\n\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ApothekeEinstellungen;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\ApothekenDetails.js",["160","161"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { Button } from \"react-bootstrap\";\r\nimport NeuesBtmModal from \"../btmbuch/NeuesBtmModal\";\r\nimport \"../../App.scss\";\r\n\r\nfunction ApothekenDetails(props) {\r\n  const [apotheke, setApotheke] = useState({ anschrift: {} });\r\n  const [neuesBtmModalShow, setneuesBtmModalShow] = useState(false);\r\n\r\n  const getApothekeData = async () => {\r\n    const response = await fetch(\r\n      `http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${props.match.params.apoId}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization:\r\n            \"Bearer \" + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n        },\r\n      }\r\n    ).catch((err) => {\r\n      //SHOW ERROR\r\n      return;\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      setApotheke(await response.json());\r\n    } else if (response.status === 403) {\r\n      props.history.push(\"/forbidden\");\r\n    } else if (response.status === 400) {\r\n      props.history.push(\"/badrequest\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getApothekeData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"apo-details\">\r\n      <ul>\r\n        <li>Name: {apotheke.name}</li>\r\n        <li>E-Mail: {apotheke.email}</li>\r\n      </ul>\r\n      <Button >Apotheke Einstellungen</Button>\r\n      <Button\r\n        onClick={() => setneuesBtmModalShow(true)}\r\n        style={{ marginLeft: \"1em\" }}\r\n      >\r\n        Neues Betäubungsmittel anlegen\r\n      </Button>\r\n      <NeuesBtmModal\r\n        show={neuesBtmModalShow}\r\n        {...props}\r\n        onHide={() => setneuesBtmModalShow(false)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default ApothekenDetails;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\ApothekeBtmList.js",["162","163"],"import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport BuchungTabelle from \"../btmbuch/BuchungTabelle\";\r\n\r\nfunction ApothekeBtmList(props) {\r\n\r\n  const { apoId } = useParams();\r\n  const [btms, setBtms] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const getBtms = async () => {\r\n    const response = await fetch(\r\n      `http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/btmbuchung`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization:\r\n            \"Bearer \" + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n        },\r\n      }\r\n    ).catch((err) => {\r\n      //SHOW ERROR\r\n      return;\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      setBtms(await response.json());\r\n    } else if (response.status === 403) {\r\n      props.history.push(\"/forbidden\");\r\n    } else if (response.status === 400) {\r\n      props.history.push(\"/badrequest\");\r\n    }\r\n  };\r\n\r\n  //wird aufgerufen von NeuesBtmModal wenn ein neues BTM hinzugefügt wurde\r\n  props.apothekeRefFunctions.updateBtmList = getBtms;\r\n\r\n  useEffect(() => {\r\n    getBtms();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"btm-buchung-wrapper\">\r\n      <input\r\n        id=\"searchBtmField\"\r\n        type=\"text\"\r\n        placeholder=\"Betäubungsmittel suchen\"\r\n        onChange={(event) => {\r\n          setInput(event.target.value);\r\n        }}\r\n        value={input}\r\n      />\r\n      {btms\r\n        .filter((val) => {\r\n          if (input === \"\") {\r\n            console.log(\"namen der Liste\", val.btm.name);\r\n            return val;\r\n          } else if (val.btm.name.toLowerCase().includes(input.toLowerCase())){\r\n              return val;\r\n          }\r\n        })\r\n        .map((btm, key) => (\r\n          <BuchungTabelle {...props} btm={btm} />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ApothekeBtmList;\r\n\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\einstellungen\\tabellen\\PersonalTabelle.js",["164"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { AddBox, Edit, DeleteForever } from '@material-ui/icons';\r\nimport { Table, Button } from 'react-bootstrap';\r\n\r\nimport PersonalAddModal from '../../../../modals/PersonalAddModal';\r\nimport PersonalEditModal from '../../../../modals/PersonalEditModal';\r\nimport DeleteModal from '../../../../modals/DeleteModal';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nfunction PersonalTabelle(props) {\r\n  const { apoId } = useParams();\r\n  const [personal, setPersonal] = useState([]);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [showPersonalAddModal, setShowPersonalAddModal] = useState(false);\r\n  const [showPersonalEditModal, setShowPersonalEditModal] = useState(false);\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n\r\n\r\n\r\n  const getPersonalData = () => {\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/benutzer`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n      }\r\n    }).then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json()\r\n      } else if (res.status === 403) {\r\n        props.history.push('forbidden');\r\n      } else if (res.status === 400) {\r\n        props.history.push('badrequest');\r\n      }\r\n    }).then((data) => setPersonal(data)).catch((err) => {\r\n      //SHOW ERROR\r\n      return;\r\n    });\r\n  }\r\n\r\n  const deleteUser = () => {\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/benutzer/${selectedUser.id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n      },\r\n    }).then((res) => {\r\n      if (res && res.status === 200) {\r\n        getPersonalData();\r\n        enqueueSnackbar('Benutzer erfolgreich gelöscht', { variant: 'success', autoHideDuration: 3000 });\r\n      } else {\r\n        //SHOW ERROR\r\n        console.log(res);\r\n      }\r\n    }).catch((err) => {\r\n      //SHOW ERROR\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  const del = user => {\r\n    setSelectedUser(user);\r\n    setShowDeleteModal(true);\r\n  }\r\n  const edit = user => {\r\n    setSelectedUser(user);\r\n    setShowPersonalEditModal(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getPersonalData()\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <PersonalAddModal {...props} show={showPersonalAddModal} onHide={() => setShowPersonalAddModal(false)} updatePersonalData={getPersonalData}/>\r\n      {selectedUser ? <PersonalEditModal {...props} user={selectedUser} show={showPersonalEditModal} onHide={() => setShowPersonalEditModal(false)} updatePersonalData={getPersonalData}/> : null}\r\n      <DeleteModal {...props} headertext={'Benutzer löschen'}\r\n        maintext={'Möchtest du diesen Benutzer wirklich löschen?'} onSubmit={deleteUser} subtext={'Dieser Vorgang kann nicht rückgängig gemacht werden'}\r\n        show={showDeleteModal} onHide={() => setShowDeleteModal(false)} />\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Nutzername</th>\r\n            <th>Nachname</th>\r\n            <th>Vorname</th>\r\n            <th>Aktiv</th>\r\n            <th>Rolle</th>\r\n            <th style={{ textAlign: 'center', verticalAlign: 'middle' }}>\r\n              <Button onClick={() => setShowPersonalAddModal(true)} >Hinzufügen <AddBox /></Button>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {personal.map(user =>\r\n            <tr key={user.id}>\r\n              <td>{user.nutzername}</td>\r\n              <td>{user.name}</td>\r\n              <td>{user.vorname}</td>\r\n              <td>{user.aktiv ? 'ja' : 'nein'}</td>\r\n              <td>{user.rolle}</td>\r\n              <td style={{ textAlign: 'center', verticalAlign: 'middle' }}>\r\n                <Button onClick={() => edit(user)}><Edit /></Button>\r\n                <Button onClick={() => del(user)}><DeleteForever /></Button>\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default PersonalTabelle;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\einstellungen\\tabellen\\ArztTabelle.js",["165"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { AddBox, Edit, DeleteForever } from '@material-ui/icons';\r\nimport { Table, Button } from 'react-bootstrap';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nimport ArztAddModal from '../../../../modals/ArztAddModal';\r\nimport ArztEditModal from '../../../../modals/ArztEditModal';\r\nimport DeleteModal from '../../../../modals/DeleteModal';\r\n\r\nfunction ArztTabelle(props) {\r\n  const { apoId } = useParams();\r\n  const [aerzte, setAerzte] = useState([]);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [selectedArzt, setSelectedArzt] = useState(null);\r\n  const [showArztAddModal, setShowArztAddModal] = useState(false);\r\n  const [showArztEditModal, setShowArztEditModal] = useState(false);\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n\r\n  const getArztData = () => {\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/arzt`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n      }\r\n    }).then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json()\r\n      } else if (res.status === 403) {\r\n        props.history.push('forbidden');\r\n      } else if (res.status === 400) {\r\n        props.history.push('badrequest');\r\n      }\r\n    }).then((data) => setAerzte(data)).catch((err) => {\r\n      //SHOW ERROR\r\n      return;\r\n    });\r\n  }\r\n\r\n  const deleteArzt = () => {\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/arzt/${selectedArzt.id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n      },\r\n    }).then((res) => {\r\n      if (res.status === 200) {\r\n        getArztData()\r\n        enqueueSnackbar('Arzt erfolgreich gelöscht', { variant: 'success', autoHideDuration: 3000 });\r\n      } else {\r\n        //SHOW ERROR\r\n        console.log(res);\r\n      }\r\n    }).catch((err) => {\r\n      //SHOW ERROR\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  const edit = arzt => {\r\n    setSelectedArzt(arzt);\r\n    setShowArztEditModal(true);\r\n  }\r\n\r\n  const del = arzt => {\r\n    setSelectedArzt(arzt);\r\n    setShowDeleteModal(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getArztData();\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <ArztAddModal {...props} show={showArztAddModal} onHide={() => setShowArztAddModal(false)} updateArztData={getArztData} />\r\n      {selectedArzt ? <ArztEditModal {...props} arzt={selectedArzt} show={showArztEditModal} onHide={() => setShowArztEditModal(false)} updateArztData={getArztData} /> : null}\r\n      <DeleteModal {...props} headertext={'Arzt löschen'}\r\n        maintext={'Möchtest du diesen Arzt wirklich löschen?'} onSubmit={deleteArzt} subtext={'Dieser Vorgang kann nicht rückgängig gemacht werden'}\r\n        show={showDeleteModal} onHide={() => setShowDeleteModal(false)} />\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Strasse</th>\r\n            <th>Ort</th>\r\n            <th style={{ textAlign: 'center', verticalAlign: 'middle' }}>\r\n              <Button onClick={() => setShowArztAddModal(true)} >Hinzufügen <AddBox /></Button>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {aerzte.map(arzt =>\r\n            <tr key={arzt.id}>\r\n              <td>{arzt.name}</td>\r\n              <td>{arzt.anschrift.strasse} {arzt.anschrift.nummer}</td>\r\n              <td>{arzt.anschrift.plz} {arzt.anschrift.ort}</td>\r\n              <td style={{ textAlign: 'center', verticalAlign: 'middle' }}>\r\n                <Button onClick={() => edit(arzt)}><Edit /></Button>\r\n                <Button onClick={() => del(arzt)}><DeleteForever /></Button>\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ArztTabelle;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\einstellungen\\tabellen\\LieferantTabelle.js",["166"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { AddBox, Edit, DeleteForever } from '@material-ui/icons';\r\nimport { Table, Button } from 'react-bootstrap';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nimport LieferantAddModal from '../../../../modals/LieferantAddModal';\r\nimport LieferantEditModal from '../../../../modals/LieferantEditModal';\r\nimport DeleteModal from '../../../../modals/DeleteModal';\r\n\r\nfunction LieferantTabelle(props) {\r\n  const { apoId } = useParams();\r\n  const [lieferanten, setLieferanten] = useState([]);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [selectedLieferant, setSelectedLieferant] = useState(null);\r\n  const [showLieferantAddModal, setShowLieferantAddModal] = useState(false);\r\n  const [showLieferantEditModal, setShowLieferantEditModal] = useState(false);\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n\r\n  const getLieferantData = () => {\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/lieferant`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n      }\r\n    }).then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json()\r\n      } else if (res.status === 403) {\r\n        props.history.push('forbidden');\r\n      } else if (res.status === 400) {\r\n        props.history.push('badrequest');\r\n      }\r\n    }).then((data) => setLieferanten(data)).catch((err) => {\r\n      //SHOW ERROR\r\n      return;\r\n    });\r\n  }\r\n\r\n  const deleteLieferant = () => {\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/lieferant/${selectedLieferant.id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n      },\r\n    }).then((res) => {\r\n      if (res.status === 200) {\r\n        getLieferantData()\r\n        enqueueSnackbar('Lieferant erfolgreich gelöscht', { variant: 'success', autoHideDuration: 3000 });\r\n      } else {\r\n        //SHOW ERROR\r\n        console.log(res);\r\n      }\r\n    }).catch((err) => {\r\n      //SHOW ERROR\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  const edit = lieferant => {\r\n    setSelectedLieferant(lieferant);\r\n    setShowLieferantEditModal(true);\r\n  }\r\n\r\n  const del = lieferant => {\r\n    setSelectedLieferant(lieferant);\r\n    setShowDeleteModal(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getLieferantData()\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <LieferantAddModal {...props} show={showLieferantAddModal} onHide={() => setShowLieferantAddModal(false)} updateLieferantData={getLieferantData} />\r\n      {selectedLieferant ? <LieferantEditModal {...props} lieferant={selectedLieferant} show={showLieferantEditModal} onHide={() => setShowLieferantEditModal(false)} updateLieferantData={getLieferantData} /> : null}\r\n      <DeleteModal {...props} headertext={'Lieferant löschen'}\r\n        maintext={'Möchtest du diesen Lieferant wirklich löschen?'} onSubmit={deleteLieferant} subtext={'Dieser Vorgang kann nicht rückgängig gemacht werden'}\r\n        show={showDeleteModal} onHide={() => setShowDeleteModal(false)} />\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Strasse</th>\r\n            <th>Ort</th>\r\n            <th style={{ textAlign: 'center', verticalAlign: 'middle' }}>\r\n              <Button onClick={() => setShowLieferantAddModal(true)} >Hinzufügen <AddBox /></Button>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {lieferanten.map(lieferant =>\r\n            <tr key={lieferant.id}>\r\n              <td>{lieferant.name}</td>\r\n              <td>{lieferant.anschrift.strasse} {lieferant.anschrift.nummer}</td>\r\n              <td>{lieferant.anschrift.plz} {lieferant.anschrift.ort}</td>\r\n              <td style={{ textAlign: 'center', verticalAlign: 'middle' }}>\r\n                <Button onClick={() => edit(lieferant)}><Edit /></Button>\r\n                <Button onClick={() => del(lieferant)}><DeleteForever /></Button>\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default LieferantTabelle;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\components\\apotheke\\einstellungen\\tabellen\\BtmTabelle.js",["167"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { AddBox, Edit, DeleteForever } from '@material-ui/icons';\r\nimport { Table, Button } from 'react-bootstrap';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nimport BtmAddModal from '../../../../modals/BtmAddModal';\r\nimport BtmEditModal from '../../../../modals/BtmEditModal';\r\nimport DeleteModal from '../../../../modals/DeleteModal';\r\n\r\nfunction BtmTabelle(props) {\r\n  const { apoId } = useParams();\r\n  const [btmListe, setBtmListe] = useState([]);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [selectedBtm, setSelectedBtm] = useState(null);\r\n  const [showBtmAddModal, setShowBtmAddModal] = useState(false);\r\n  const [showBtmEditModal, setShowBtmEditModal] = useState(false);\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n\r\n  const getBtmData = () => {\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/btm`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n      }\r\n    }).then((res) => {\r\n      if (res.status === 200) {\r\n        return res.json()\r\n      } else if (res.status === 403) {\r\n        props.history.push('forbidden');\r\n      } else if (res.status === 400) {\r\n        props.history.push('badrequest');\r\n      }\r\n    }).then((data) => setBtmListe(data)).catch((err) => {\r\n      //SHOW ERROR\r\n      return;\r\n    });\r\n  }\r\n\r\n  const deleteBtm = () => {\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/btm/${selectedBtm.id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n      },\r\n    }).then((res) => {\r\n      if (res.status === 200) {\r\n        getBtmData()\r\n        enqueueSnackbar('Btm erfolgreich gelöscht', { variant: 'success', autoHideDuration: 3000 });\r\n      } else {\r\n        //SHOW ERROR\r\n        console.log(res);\r\n      }\r\n    }).catch((err) => {\r\n      //SHOW ERROR\r\n      console.log(err);\r\n    });\r\n  }\r\n\r\n  const edit = btm => {\r\n    setSelectedBtm(btm);\r\n    setShowBtmEditModal(true);\r\n  }\r\n\r\n  const del = btm => {\r\n    setSelectedBtm(btm);\r\n    setShowDeleteModal(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getBtmData()\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <BtmAddModal {...props} show={showBtmAddModal} onHide={() => setShowBtmAddModal(false)} updateBtmData={getBtmData} />\r\n      {selectedBtm ? <BtmEditModal {...props} btm={selectedBtm} show={showBtmEditModal} onHide={() => setShowBtmEditModal(false)} updateBtmData={getBtmData} /> : null}\r\n      <DeleteModal {...props} headertext={'Btm löschen'}\r\n        maintext={'Möchtest du diesen Btm wirklich löschen?'} onSubmit={deleteBtm} subtext={'Dieser Vorgang kann nicht rückgängig gemacht werden'}\r\n        show={showDeleteModal} onHide={() => setShowDeleteModal(false)} />\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Darreichungsform</th>\r\n            <th>Einheit</th>\r\n            <th>Menge</th>\r\n            <th style={{ textAlign: 'center', verticalAlign: 'middle' }}>\r\n              <Button onClick={() => setShowBtmAddModal(true)} >Hinzufügen <AddBox /></Button>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {btmListe.map(btm =>\r\n            <tr key={btm.id}>\r\n              <td>{btm.name}</td>\r\n              <td>{btm.darreichungsform}</td>\r\n              <td>{btm.einheit}</td>\r\n              <td>{btm.menge}</td>\r\n              <td style={{ textAlign: 'center', verticalAlign: 'middle' }}>\r\n                <Button onClick={() => edit(btm)}><Edit /></Button>\r\n                <Button onClick={() => del(btm)}><DeleteForever /></Button>\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default BtmTabelle;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\PersonalAddModal.js",["168"],"import React, { useState, useEffect } from 'react';\r\nimport { Modal, Col, Button, Form } from 'react-bootstrap';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nfunction PersonalAddModal(props) {\r\n\r\n  const { apoId } = useParams();\r\n\r\n  const [nutzernameVergeben, setNutzernameVergeben] = useState(false);\r\n\r\n  //for password checking\r\n  const [passwordConfirmInvalid, setPasswordConfirmInvalid] = useState(false);\r\n  const [newPasswordVal, setNewPasswordVal] = useState('');\r\n  const [passwordConfirmVal, setPasswordConfirmVal] = useState('');\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  let roles = [\"ADMIN\", \"PRUEFER\", \"BENUTZER\"];\r\n\r\n  const createNewUser = async event => {\r\n    event.preventDefault();\r\n    let { username, vorname, nachname, neuesPasswort, rolle } = event.target;\r\n\r\n    let body = {\r\n      name: nachname.value,\r\n      nutzername: username.value,\r\n      vorname: vorname.value,\r\n      aktiv: true,\r\n      rolle: rolle.value,\r\n      passwort: neuesPasswort.value\r\n    }\r\n\r\n    console.log(body)\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/benutzer`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n      },\r\n      body: JSON.stringify(body)\r\n    }).then((res) => {\r\n      if (res.status === 201) {\r\n        props.onHide();\r\n        props.updateUserList();\r\n        enqueueSnackbar('Benutzer erstellt', { variant: 'success', autoHideDuration: 3000 });\r\n      } else if (res.status === 400) {\r\n        enqueueSnackbar('Ein Fehler ist aufgetaucht', { variant: 'error', autoHideDuration: 3000 });\r\n      }\r\n    }).catch((err) => {\r\n      console.log(err);\r\n      return;\r\n    });\r\n  }\r\n\r\n  const checkIfUserNameIsTaken = async event => {\r\n    let newUsername = event.target.value;\r\n    if (newUsername.length < 4) {\r\n      //if shorter than 4 its invalid\r\n      setNutzernameVergeben(true);\r\n      return;\r\n    }\r\n\r\n    await fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/benutzer/${newUsername}/checkUsername`, {\r\n      method: 'POST',\r\n    }).then((res) => {\r\n      if (res.status === 200) {\r\n        setNutzernameVergeben(false);\r\n      } else if (res.status === 400) {\r\n        setNutzernameVergeben(true);\r\n      }\r\n    }).catch((err) => {\r\n      console.log(err);\r\n      return;\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    setPasswordConfirmInvalid(newPasswordVal !== passwordConfirmVal);\r\n  }, [newPasswordVal, passwordConfirmVal]);\r\n\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      onExiting={props.onHide}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Personal hinzufügen\r\n            </Modal.Title>\r\n      </Modal.Header>\r\n      <Form onSubmit={createNewUser}>\r\n        <Modal.Body>\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"username\">\r\n              <Form.Label>Benutzername</Form.Label>\r\n              <Form.Control name=\"username\" required onChange={checkIfUserNameIsTaken}\r\n                isInvalid={nutzernameVergeben} type=\"text\" />\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} sm={4} controlId=\"vorname\">\r\n              <Form.Label>Vorname</Form.Label>\r\n              <Form.Control name=\"vorname\" required type=\"text\" />\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Col} sm={8} controlId=\"nachname\">\r\n              <Form.Label>Nachname</Form.Label>\r\n              <Form.Control name=\"nachname\" required type=\"text\" />\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"neuesPasswort\">\r\n              <Form.Label>Neues Passwort</Form.Label>\r\n              <Form.Control required minlength={5} onChange={event => setNewPasswordVal(event.target.value)} name=\"neuesPasswort\" type=\"password\" />\r\n            </Form.Group>\r\n            <Form.Group as={Col} controlId=\"neuesPasswortConfirm\">\r\n              <Form.Label>Neues Passwort bestätigen</Form.Label>\r\n              <Form.Control required minlength={5} onChange={event => setPasswordConfirmVal(event.target.value)} isInvalid={passwordConfirmInvalid} name=\"neuesPasswortConfirm\" type=\"password\" />\r\n            </Form.Group>\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <Form.Group as={Col} sm={4} controlId=\"rolle\">\r\n              <Form.Label>Rolle</Form.Label>\r\n              <Form.Control required name=\"rolle\" required as=\"select\" >\r\n                {roles.map(r => <option key={r} value={r}>{r}</option>)}\r\n              </Form.Control>\r\n            </Form.Group>\r\n          </Form.Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button autofocus variant=\"\" onClick={props.onHide}>Abbrechen</Button>\r\n          <Button variant=\"primary\" type=\"submit\" >Bestätigen</Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default PersonalAddModal;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\DeleteModal.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\modals\\PersonalEditModal.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\modals\\BtmAddModal.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\modals\\LieferantEditModal.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\modals\\BtmEditModal.js",["169","170","171"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Modal, Col, Button, Form, Alert, Row } from 'react-bootstrap';\r\nimport { useSnackbar } from 'notistack';\r\nimport { responsiveFontSizes } from '@material-ui/core';\r\n\r\nfunction BtmEditModal(props) {\r\n\r\n  const { apoId } = useParams();\r\n\r\n  const darreichungsformen = {\r\n    'Tbl': { einheiten: ['Stueck'] },\r\n    'Trp': { einheiten: ['ml'] },\r\n    'Sup': { einheiten: ['Stueck'] },\r\n    'RTA': { einheiten: ['Stueck'] },\r\n    'RKA': { einheiten: ['Stueck'] },\r\n    'Ampullen': { einheiten: ['Stueck'] },\r\n    'Rezeptursubstanz': { einheiten: ['mg', 'g'] },\r\n    'HKP': { einheiten: ['Stueck'] },\r\n    'Pfl': { einheiten: ['Stueck'] }\r\n  };\r\n\r\n  let { id, darreichungsform, einheit, name, menge } = props.btm;\r\n  // console.log(props.btm)\r\n\r\n  const [activeDarreichungsform, setActiveDarreichungsform] = useState(darreichungsform);\r\n  const [activeEinheit, setActiveEinheit] = useState(einheit);\r\n  const [einheiten, setEinheiten] = useState(darreichungsformen[darreichungsform].einheiten);\r\n\r\n  const [showError, setShowError] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n\r\n  const updateDetails = async event => {\r\n    event.preventDefault();\r\n    let { name, darreichungsform, einheit, menge } = event.target;\r\n    let body = {\r\n      name: name.value,\r\n      darreichungsform: darreichungsform.value,\r\n      einheit: einheit.value,\r\n      menge: menge.value\r\n    }\r\n    console.log(body)\r\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/btm/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n      },\r\n      body: JSON.stringify(body)\r\n    }).then((res) => {\r\n      if (res.status === 200) {\r\n        hide();\r\n        props.updateBtmData();\r\n        enqueueSnackbar('Benutzer aktualisiert', { variant: 'success', autoHideDuration: 3000 });\r\n      } else if (res.status === 400) {\r\n        enqueueSnackbar('Ein Fehler ist aufgetaucht', { variant: 'error', autoHideDuration: 3000 });\r\n      } else if (responsiveFontSizes.status === 403) {\r\n        enqueueSnackbar('Falsches Passwort', { variant: 'error', autoHideDuration: 3000 });\r\n      }\r\n    }).catch((err) => {\r\n      console.log(err);\r\n      return;\r\n    });\r\n\r\n    \r\n  }\r\n\r\n  useEffect(() => {\r\n    setActiveDarreichungsform(props.btm.darreichungsform);\r\n    setActiveEinheit(props.btm.einheit);\r\n    setEinheiten(darreichungsformen[props.btm.darreichungsform].einheiten)\r\n    console.log(activeDarreichungsform, activeEinheit, einheiten)\r\n  }, [props.btm])\r\n\r\n  const hide = () => {\r\n    setActiveDarreichungsform(props.btm.darreichungsform);\r\n    setActiveEinheit(props.btm.einheit);\r\n    setEinheiten(darreichungsformen[props.btm.darreichungsform].einheiten)\r\n    props.onHide();\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      onExiting={hide}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Betäubungsmittel bearbeiten\r\n                 </Modal.Title>\r\n      </Modal.Header>\r\n      <Form onSubmit={updateDetails}>\r\n        {showError ? <Alert variant=\"danger\">{errorMessage}</Alert> : null}\r\n        <Modal.Body>\r\n          <Form.Group as={Row} controlId=\"name\">\r\n            <Form.Label column sm=\"2\">\r\n              Name\r\n                        </Form.Label>\r\n            <Col sm=\"10\">\r\n              <Form.Control defaultValue={name} name=\"name\" required type=\"text\" />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Form.Group as={Row} controlId=\"menge\">\r\n            <Form.Label column sm=\"2\">\r\n              Menge\r\n                        </Form.Label>\r\n            <Col sm=\"10\">\r\n              <Form.Control defaultValue={menge} name=\"menge\" type=\"number\" min=\"0\" />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n\r\n          <Form.Group as={Row} controlId=\"darreichungsform\">\r\n            <Form.Label column sm=\"2\">\r\n              Darreichungsform\r\n                        </Form.Label>\r\n            <Col sm=\"10\">\r\n              <Form.Control defaultValue={darreichungsform} onChange={event => {\r\n                setActiveDarreichungsform(event.target.value)\r\n                setEinheiten(darreichungsformen[event.target.value].einheiten)\r\n              }} name=\"darreichungsform\" required as=\"select\">\r\n                {\r\n                  darreichungsformen ? Object.keys(darreichungsformen).map(df => <option kef={df} value={df}>{df}</option>) : null\r\n                }\r\n              </Form.Control>\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Form.Group as={Row} controlId=\"einheit\">\r\n            <Form.Label column sm=\"2\">\r\n              Einheit\r\n                        </Form.Label>\r\n            <Col sm=\"10\">\r\n              <Form.Control defaultValue={einheit} name=\"einheit\" required as=\"select\">\r\n                {\r\n                  einheiten ? Object.keys(einheiten).map(e => <option key={einheiten[e]} value={einheiten[e]}>{einheiten[e]}</option>) : null\r\n                }\r\n              </Form.Control>\r\n            </Col>\r\n          </Form.Group>\r\n\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"\" onClick={props.onHide}>Abbrechen</Button>\r\n          <Button variant=\"primary\" type=\"submit\">Bestätigen</Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default BtmEditModal;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\ArztEditModal.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\modals\\LieferantAddModal.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\modals\\ArztAddModal.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\modals\\ApothekeEditModal.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\modals\\UserDetailsUpdateModal.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\modals\\ApothekeRegisterModal.js",["172","173","174","175","176","177","178"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { Modal, Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport { useForm } from \"./useForm\";\r\nimport MobileStepper from \"@material-ui/core/MobileStepper\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\nfunction ApothekeRegisterModal(props) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [showContinueModal, setShowContinueModal] = useState(false);\r\n  const [values, handleChange] = useForm({\r\n    name: \"\",\r\n    email: \"\",\r\n    strasse: \"\",\r\n    nummer: \"\",\r\n    plz: \"\",\r\n    ort: \"\",\r\n    vorname: \"\",\r\n    nachname: \"\",\r\n    nutzername: \"\",\r\n    rolle: \"Admin\",\r\n  });\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setShowContinueModal(true);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    setShowContinueModal(false);\r\n  };\r\n\r\n  const createNewApo = () => {\r\n    let body = {\r\n      name: values.name,\r\n      email: values.email,\r\n      anschrift: {\r\n        strasse: values.strasse,\r\n        nummer: values.nummer,\r\n        plz: values.plz,\r\n        ort: values.ort,\r\n      },\r\n    };\r\n    return fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(body),\r\n    }).catch((err) => {\r\n      console.log(err);\r\n    });\r\n  };\r\n\r\n  const createNewAdmin = (apoId) => {\r\n    let body = {\r\n      name: values.nachname,\r\n      vorname: values.vorname,\r\n      nutzername: values.nutzername,\r\n      passwort: passwords.password,\r\n      rolle: 'ADMIN',\r\n    };\r\n\r\n    return fetch(\r\n      `http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/benutzer`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(body),\r\n      }\r\n    ).catch((err) => {\r\n      console.log(err);\r\n    });\r\n  };\r\n\r\n  const login = async () => {\r\n    let body = {\r\n      username: values.nutzername,\r\n      password: passwords.password,\r\n    };\r\n    return await fetch(`http://${process.env.REACT_APP_BACKEND_URL}/login`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(body),\r\n    }).catch((err) => {\r\n      //SHOW ERROR\r\n      console.log(err);\r\n    });\r\n  };\r\n\r\n  const [passwords, setPasswords] = React.useState({\r\n    password: \"\",\r\n    passwordCheck: \"\",\r\n  });\r\n\r\n  function handleChangePassword(e) {\r\n    setPasswords({\r\n      ...passwords,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  }\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    //ERROR HANDLING MISSING\r\n    // let { username, neuesPasswort} = event.target;\r\n    let apoResponse = await createNewApo();\r\n    if (apoResponse.status === 201) {\r\n      let apoId = await apoResponse.json();\r\n      let adminRespone = await createNewAdmin(apoId.id);\r\n      if (adminRespone.status === 201) {\r\n        let loginResponse = await login();\r\n        if (loginResponse.status === 200) {\r\n          const data = await loginResponse.json();\r\n          window.sessionStorage.setItem(\"edbapo-jwt\", data.jwt);\r\n          props.history.push(`/apotheke/${data.apothekeId}`);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const cancel = () => {\r\n    setShowContinueModal(false);\r\n  };\r\n\r\n  const renderSchritt1 = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <Form.Label>1. Schritt Apotheke erstellen</Form.Label>\r\n        <Form.Row>\r\n          <Form.Group as={Col} controlId=\"name\">\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              placeholder=\"Name der Apotheke\"\r\n              name=\"name\"\r\n              value={values.name}\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Group>\r\n        </Form.Row>\r\n\r\n        <Form.Row>\r\n          <Form.Group as={Col} controlId=\"email\">\r\n            <Form.Control\r\n              required\r\n              type=\"email\"\r\n              placeholder=\"E-Mail der Apotheke\"\r\n              name=\"email\"\r\n              value={values.email}\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Group>\r\n        </Form.Row>\r\n\r\n        <Form.Row>\r\n          <Form.Group as={Col} sm={9} controlId=\"strasse\">\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              placeholder=\"Straße\"\r\n              name=\"strasse\"\r\n              value={values.strasse}\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group as={Col} sm={3} controlId=\"nummer\">\r\n            <Form.Control\r\n              required\r\n              type=\"number\"\r\n              placeholder=\"Nummer\"\r\n              name=\"nummer\"\r\n              value={values.nummer}\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Group>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Form.Group as={Col} sm={3} controlId=\"plz\">\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              placeholder=\"PLZ\"\r\n              name=\"plz\"\r\n              value={values.plz}\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group as={Col} sm={9} controlId=\"ort\">\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              placeholder=\"Ort\"\r\n              name=\"ort\"\r\n              value={values.ort}\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Group>\r\n        </Form.Row>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const renderSchritt2 = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <Form.Label>2. Schritt Admin Nutzer erstellen</Form.Label>\r\n        <Form.Group controllId=\"vorname\">\r\n          <Form.Control\r\n            required=\"required\"\r\n            type=\"text\"\r\n            placeholder=\"Vorname\"\r\n            name=\"vorname\"\r\n            value={values.vorname}\r\n            onChange={handleChange}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controllId=\"nachname\">\r\n          <Form.Control\r\n            required=\"required\"\r\n            type=\"text\"\r\n            placeholder=\"Nachname\"\r\n            name=\"nachname\"\r\n            value={values.nachname}\r\n            onChange={handleChange}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controllId=\"nutzername\">\r\n          <Form.Control\r\n            required=\"required\"\r\n            type=\"text\"\r\n            placeholder=\"Nutzername\"\r\n            name=\"nutzername\"\r\n            value={values.nutzername}\r\n            onChange={handleChange}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controllId=\"password\">\r\n          <Form.Control\r\n            required=\"required\"\r\n            type=\"password\"\r\n            placeholder=\"Passwort erstellen\"\r\n            name=\"password\"\r\n            value={passwords.password}\r\n            onChange={handleChangePassword}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Control\r\n            required=\"required\"\r\n            type=\"password\"\r\n            name=\"passwordCheck\"\r\n            placeholder=\"Passwort wiederholen\"\r\n            value={passwords.passwordCheck}\r\n            onChange={handleChangePassword}\r\n          />\r\n        </Form.Group>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      show={props.show}\r\n      onHide={props.onHide}\r\n      centered\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>Neue Apotheke registrieren</Modal.Title>\r\n      </Modal.Header>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Modal.Body>\r\n          {showContinueModal ? renderSchritt2() : renderSchritt1()}\r\n        </Modal.Body>\r\n        <MobileStepper\r\n          variant=\"dots\"\r\n          steps={2}\r\n          position=\"static\"\r\n          activeStep={activeStep}\r\n          className={classes.root}\r\n          nextButton={\r\n            <Button\r\n              size=\"small\"\r\n              type={activeStep == 1 ? \"submit\" : \"button\"}\r\n              onClick={activeStep == 0 ? handleNext : null}\r\n              disabled={activeStep === 2}\r\n            >\r\n              {activeStep === 1 ? 'Registrien' : 'Weiter'}\r\n              {theme.direction === \"rtl\" ? (<KeyboardArrowLeft />) : (<KeyboardArrowRight />)}\r\n            </Button>\r\n          }\r\n          backButton={\r\n            <Button\r\n              size=\"small\"\r\n              type={activeStep == 1 ? \"submit\" : \"button\"}\r\n              onClick={handleBack}\r\n              disabled={activeStep === 0}\r\n            >\r\n              {theme.direction === \"rtl\" ? (\r\n                <KeyboardArrowRight />\r\n              ) : (\r\n                <KeyboardArrowLeft />\r\n              )}\r\n              Zurück\r\n            </Button>\r\n          }\r\n        />\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\nexport default ApothekeRegisterModal;\r\n","D:\\dev\\EDB-Apo\\frontend\\src\\modals\\useForm.js",[],"D:\\dev\\EDB-Apo\\frontend\\src\\modals\\UpdateBuchungModal.js",["179"],"import React,{useEffect} from 'react';\r\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap';\r\nimport { useSnackbar } from 'notistack';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction UpdateBuchungModal(props) {\r\n\r\n    // let apothekeId = sessionStorage.getItem('apothekeId');\r\n    const { apoId } = useParams();\r\n    // eslint-disable-next-line\r\n    let {lieferanten, aerzte, empfaenger} = props;\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const sendUpdateRequest = async (buchungData) => {\r\n        const response = await fetch(`http://${process.env.REACT_APP_BACKEND_URL}/apotheke/${apoId}/btmbuchung/${props.buchung.id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + window.sessionStorage.getItem(\"edbapo-jwt\"),\r\n            },\r\n            body: JSON.stringify(buchungData)\r\n        }).catch((err) => {\r\n            //SHOW ERROR\r\n            console.log(err);\r\n        });\r\n\r\n\r\n        if (response && response.status === 200) {\r\n            props.onHide();\r\n            enqueueSnackbar('Buchung erfolgreich aktualisiert', { variant: 'success', autoHideDuration: 3000 });\r\n            props.apothekeRefFunctions.updateBtmList();\r\n        } else {\r\n            //SHOW ERROR\r\n            console.log(response);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const updateBuchung = event => {\r\n        event.preventDefault();\r\n\r\n        if (props.buchung.typ.toLowerCase() === 'zugang') {\r\n            let { anforderungsschein, btmMenge, lieferant, pruefdatum, datum } = event.target;\r\n            let buchungData = {\r\n                benutzer: props.user.id,\r\n                btm: props.btm.btm.id,\r\n                menge: btmMenge.value,\r\n                typ: 'ZUGANG',\r\n                lieferant: lieferant.value,\r\n                anforderungsschein: anforderungsschein.value,\r\n                pruefdatum: pruefdatum.value,\r\n                datum: datum.value\r\n            }\r\n            sendUpdateRequest(buchungData);\r\n        } else if (props.buchung.typ.toLowerCase() === 'abgang') {\r\n            let { btmMenge, rezept, empfaenger, arzt, pruefdatum, datum} = event.target;\r\n            let buchungData = {\r\n                benutzer: props.user.id,\r\n                btm: props.btm.btm.id,\r\n                menge: btmMenge.value,\r\n                typ: 'ABGANG',\r\n                empfaenger: empfaenger.value,\r\n                arzt: arzt.value,\r\n                rezept: rezept.value,\r\n                pruefdatum: pruefdatum.value,\r\n                datum: datum.value\r\n            }\r\n            sendUpdateRequest(buchungData);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n    function Zugang({ buchung }) {\r\n        if (buchung.typ) {\r\n            if (buchung.typ.toLowerCase() === 'zugang') {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Form.Group as={Row} controlId=\"anforderungsschein\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Anforderungsschein\r\n                    </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control name=\"anforderungsschein\" type=\"text\" required defaultValue={buchung.anforderungsschein} />\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"lieferant\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Lieferant\r\n                    </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control name=\"lieferant\" defaultValue={buchung.lieferant.name} required as=\"select\">\r\n                                     {console.log('lieferanten', lieferanten)}   \r\n                                    {lieferanten.map(l => <option key={l.id} value={l.id}>{l.name}</option>)}\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </React.Fragment>)\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function Abgang({ buchung }) {\r\n        if (buchung.typ) {\r\n            if (buchung.typ.toLowerCase() === 'abgang') {\r\n                return (\r\n                    <React.Fragment>\r\n                        <Form.Group as={Row} controlId=\"empfaenger\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Empfaenger\r\n                    </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control name=\"empfaenger\" defaultValue={buchung.empfaenger.name} required as=\"select\">\r\n                                    {empfaenger.map(e => <option key={e.id} value={e.id}>{e.vorname} {e.name}</option>)}\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"arzt\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Arzt\r\n                    </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control name=\"arzt\" defaultValue={buchung.arzt.name} required as=\"select\">\r\n                                    {aerzte.map(a => <option key={a.id} value={a.id}>{a.name}</option>)}\r\n                                </Form.Control>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"rezept\">\r\n                            <Form.Label column sm=\"2\">\r\n                                Rezept\r\n                            </Form.Label>\r\n                            <Col sm=\"10\">\r\n                                <Form.Control defaultValue={buchung.rezept} name=\"rezept\" type=\"text\" required />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </React.Fragment>)\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            onExiting={props.onHide}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Betäubungsmittel-Buchung aktualisieren\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={updateBuchung}>\r\n                <Modal.Body>\r\n                <Form.Group as={Row} controlId=\"datum\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Datum\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control name=\"datum\" type=\"date\" defaultValue={props.buchung.datum} />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"btmMenge\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Menge\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control name=\"btmMenge\" type=\"number\" min=\"1\" defaultValue={props.buchung.menge} />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row} controlId=\"pruefdatum\">\r\n                        <Form.Label column sm=\"2\">\r\n                            Prüfdatum\r\n                        </Form.Label>\r\n                        <Col sm=\"10\">\r\n                            <Form.Control name=\"pruefdatum\" type=\"date\" defaultValue={props.buchung.pruefdatum} />\r\n                        </Col>\r\n                    </Form.Group>\r\n                    <Zugang buchung={props.buchung} />\r\n                    <Abgang buchung={props.buchung} />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"\" onClick={props.onHide}>Abbrechen</Button>\r\n                    <Button variant=\"primary\" type=\"submit\">Bestätigen</Button>\r\n                </Modal.Footer>\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default UpdateBuchungModal;\r\n",{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":3,"column":50,"nodeType":"186","messageId":"187","endLine":3,"endColumn":54},{"ruleId":"188","severity":1,"message":"189","line":44,"column":6,"nodeType":"190","endLine":44,"endColumn":8,"suggestions":"191"},{"ruleId":"184","severity":1,"message":"192","line":2,"column":9,"nodeType":"186","messageId":"187","endLine":2,"endColumn":12},{"ruleId":"184","severity":1,"message":"193","line":8,"column":18,"nodeType":"186","messageId":"187","endLine":8,"endColumn":25},{"ruleId":"184","severity":1,"message":"194","line":8,"column":27,"nodeType":"186","messageId":"187","endLine":8,"endColumn":31},{"ruleId":"184","severity":1,"message":"195","line":8,"column":45,"nodeType":"186","messageId":"187","endLine":8,"endColumn":50},{"ruleId":"188","severity":1,"message":"196","line":226,"column":6,"nodeType":"190","endLine":226,"endColumn":8,"suggestions":"197"},{"ruleId":"184","severity":1,"message":"198","line":12,"column":12,"nodeType":"186","messageId":"187","endLine":12,"endColumn":20},{"ruleId":"184","severity":1,"message":"199","line":29,"column":19,"nodeType":"186","messageId":"187","endLine":29,"endColumn":23},{"ruleId":"188","severity":1,"message":"200","line":79,"column":8,"nodeType":"190","endLine":79,"endColumn":10,"suggestions":"201"},{"ruleId":"188","severity":1,"message":"202","line":89,"column":6,"nodeType":"190","endLine":89,"endColumn":8,"suggestions":"203"},{"ruleId":"184","severity":1,"message":"204","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":19},{"ruleId":"188","severity":1,"message":"205","line":37,"column":6,"nodeType":"190","endLine":37,"endColumn":8,"suggestions":"206"},{"ruleId":"188","severity":1,"message":"207","line":40,"column":6,"nodeType":"190","endLine":40,"endColumn":8,"suggestions":"208"},{"ruleId":"209","severity":1,"message":"210","line":54,"column":23,"nodeType":"211","messageId":"212","endLine":54,"endColumn":25},{"ruleId":"188","severity":1,"message":"213","line":73,"column":6,"nodeType":"190","endLine":73,"endColumn":8,"suggestions":"214"},{"ruleId":"188","severity":1,"message":"215","line":72,"column":6,"nodeType":"190","endLine":72,"endColumn":8,"suggestions":"216"},{"ruleId":"188","severity":1,"message":"217","line":72,"column":6,"nodeType":"190","endLine":72,"endColumn":8,"suggestions":"218"},{"ruleId":"188","severity":1,"message":"219","line":72,"column":6,"nodeType":"190","endLine":72,"endColumn":8,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":131,"column":51,"nodeType":"223","endLine":131,"endColumn":59},{"ruleId":"184","severity":1,"message":"224","line":30,"column":21,"nodeType":"186","messageId":"187","endLine":30,"endColumn":33},{"ruleId":"184","severity":1,"message":"225","line":31,"column":24,"nodeType":"186","messageId":"187","endLine":31,"endColumn":39},{"ruleId":"188","severity":1,"message":"226","line":75,"column":6,"nodeType":"190","endLine":75,"endColumn":17,"suggestions":"227"},{"ruleId":"184","severity":1,"message":"228","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":26},{"ruleId":"184","severity":1,"message":"204","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":19},{"ruleId":"184","severity":1,"message":"192","line":4,"column":31,"nodeType":"186","messageId":"187","endLine":4,"endColumn":34},{"ruleId":"184","severity":1,"message":"229","line":136,"column":9,"nodeType":"186","messageId":"187","endLine":136,"endColumn":15},{"ruleId":"230","severity":1,"message":"231","line":299,"column":32,"nodeType":"232","messageId":"233","endLine":299,"endColumn":34},{"ruleId":"230","severity":1,"message":"231","line":300,"column":35,"nodeType":"232","messageId":"233","endLine":300,"endColumn":37},{"ruleId":"230","severity":1,"message":"231","line":310,"column":32,"nodeType":"232","messageId":"233","endLine":310,"endColumn":34},{"ruleId":"184","severity":1,"message":"228","line":1,"column":15,"nodeType":"186","messageId":"187","endLine":1,"endColumn":24},"no-native-reassign",["234"],"no-negated-in-lhs",["235"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserDetails'. Either include it or remove the dependency array.","ArrayExpression",["236"],"'Row' is defined but never used.","'vorname' is assigned a value but never used.","'name' is assigned a value but never used.","'aktiv' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadAerzte', 'loadEmpfaenger', and 'loadLieferanten'. Either include them or remove the dependency array.",["237"],"'maxMenge' is assigned a value but never used.","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.btm.btm.menge'. Either include it or remove the dependency array. If 'setMaxMenge' needs the current value of 'props.btm.btm.menge', you can also switch to useReducer instead of useState and read 'props.btm.btm.menge' in the reducer.",["238"],"React Hook useEffect has missing dependencies: 'getCurrentApotheke' and 'getUserData'. Either include them or remove the dependency array.",["239"],"'useParams' is defined but never used.","React Hook useEffect has a missing dependency: 'getApothekeData'. Either include it or remove the dependency array.",["240"],"React Hook useEffect has a missing dependency: 'getBtms'. Either include it or remove the dependency array.",["241"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getPersonalData'. Either include it or remove the dependency array.",["242"],"React Hook useEffect has a missing dependency: 'getArztData'. Either include it or remove the dependency array.",["243"],"React Hook useEffect has a missing dependency: 'getLieferantData'. Either include it or remove the dependency array.",["244"],"React Hook useEffect has a missing dependency: 'getBtmData'. Either include it or remove the dependency array.",["245"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setShowError' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activeDarreichungsform', 'activeEinheit', 'darreichungsformen', and 'einheiten'. Either include them or remove the dependency array.",["246"],"'useEffect' is defined but never used.","'cancel' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},"Update the dependencies array to be: [getUserDetails]",{"range":"269","text":"270"},"Update the dependencies array to be: [loadAerzte, loadEmpfaenger, loadLieferanten]",{"range":"271","text":"272"},"Update the dependencies array to be: [props.btm.btm.menge]",{"range":"273","text":"274"},"Update the dependencies array to be: [getCurrentApotheke, getUserData]",{"range":"275","text":"276"},"Update the dependencies array to be: [getApothekeData]",{"range":"277","text":"278"},"Update the dependencies array to be: [getBtms]",{"range":"279","text":"280"},"Update the dependencies array to be: [getPersonalData]",{"range":"281","text":"282"},"Update the dependencies array to be: [getArztData]",{"range":"283","text":"284"},"Update the dependencies array to be: [getLieferantData]",{"range":"285","text":"286"},"Update the dependencies array to be: [getBtmData]",{"range":"287","text":"288"},"Update the dependencies array to be: [activeDarreichungsform, activeEinheit, darreichungsformen, einheiten, props.btm]",{"range":"289","text":"290"},[1478,1480],"[getUserDetails]",[6832,6834],"[loadAerzte, loadEmpfaenger, loadLieferanten]",[2781,2783],"[props.btm.btm.menge]",[2921,2923],"[getCurrentApotheke, getUserData]",[1118,1120],"[getApothekeData]",[1141,1143],"[getBtms]",[2410,2412],"[getPersonalData]",[2331,2333],"[getArztData]",[2475,2477],"[getLieferantData]",[2310,2312],"[getBtmData]",[2744,2755],"[activeDarreichungsform, activeEinheit, darreichungsformen, einheiten, props.btm]"]